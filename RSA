import random
from math import exp
from fractions import gcd
from functools import reduce

#This function will run all the other functions
#(just making it more organized)
def main():
	print randomPrime()
	"""This is a"""
	a = int(input("Choose your a: "))
	"""This is b"""
	b = int(input("Choose your b: "))
	"""Trying to make this Euclidean Function work"""
	print egcd(a, b)
	"""Input for p and q."""
	p = int(input("Choose your p: "))
	q = int(input("Choose your q: "))
	print modinv(p,q)
	
	
def fermat(prime):
	a = random.randint(2,prime-1)
	if(pow(a, prime-1,prime) == 1):
		return True
	else:
		return False

def randomPrime():
	userinput = int(input("How many digits long you want your prime number to be: "))
	#this will generate a 10 digits number
	
	while True:
		Prime = random.randint(10**(userinput - 1), (10**userinput) - 1)
		test = 0
		while (True):
			if(fermat(Prime)):
				test = test + 1
			else:
				break
			if(test == 10): #Make sure it checks 10 consecutive times before giving the prime number
				return Prime



"""Extended Euclidean Algorithm"""
def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y

"""To find E"""	
def modinv(a, m):
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m
		
"""RSA Encryption"""
#def encryption(e,n):


	

#This will always be true, running the main function
if True:
	main()
